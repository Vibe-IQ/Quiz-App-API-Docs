openapi: 3.0.3
info:
  title: Quiz & Account API
  description: "This API handles user accounts, authentication, and quiz features.\
    \ \n\n**Core Features:**\n- User authentication (login, register, password reset).\n\
    - Account management (update details, delete accounts).\n- Quiz functionality:\
    \ create, attempt, edit, and delete quizzes.\n- Leaderboards and quiz stats for\
    \ tracking performance."
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
- url: https://petstore3.swagger.io/api/v3
tags:
- name: Auth
  description: Routes related to authentication
- name: Account
  description: Routes responsible for managing a user's account
- name: Quiz
  description: Routes responsible for managing quizes
paths:
  /auth/login:
    post:
      tags:
      - Auth
      summary: Login a user
      description: Creates a session document for the user and returns it
      operationId: loginUser
      requestBody:
        description: Create a session document for a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: Successful login operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
              example:
                sessionId: 1234567890abcdef
                userId: user_123
                expiresAt: 2024-12-02T12:00:00Z
        "400":
          description: Bad request - Invalid input or missing fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: Invalid username or password
        "401":
          description: Unauthorized - Incorrect credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: Authentication failed
        "422":
          description: Validation exception - Malformed input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 422
                message: "Validation error: missing 'username'"
      x-swagger-router-controller: Auth
  /auth/register:
    post:
      tags:
      - Auth
      summary: Register a new user
      description: Creates a new user account and returns the user's details.
      operationId: registerUser
      requestBody:
        description: Information required to register a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        "201":
          description: Successful registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              example:
                id: user_123
                username: new_user
                email: user@example.com
                createdAt: 2024-12-02T12:00:00Z
        "400":
          description: Bad request - Invalid input or missing fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: "Invalid input: passwords do not match"
        "409":
          description: Conflict - User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 409
                message: User with this email already exists
        "422":
          description: Validation exception - Malformed input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 422
                message: "Validation error: missing 'email'"
      x-swagger-router-controller: Auth
  /auth/reset-password:
    post:
      tags:
      - Auth
      summary: Initiate the password reset process
      description: Sends a password reset email or link to the user's registered email
        address.
      operationId: forgetPassword
      requestBody:
        description: Email address of the user requesting a password reset
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgetPasswordRequest'
        required: true
      responses:
        "200":
          description: Password reset email sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: Password reset instructions have been sent to your email.
        "400":
          description: Bad request - Invalid email format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: Invalid email format
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: No account found with this email
        "422":
          description: Validation error - Missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 422
                message: "Validation error: missing 'email'"
      x-swagger-router-controller: Auth
  /auth/verify-email:
    get:
      tags:
      - Auth
      summary: Verify user's email address
      description: Verifies the user's email address using a session cookie and an
        optional token sent as a query parameter.
      operationId: verifyEmail
      parameters:
      - name: token
        in: query
        description: The email verification token sent to the user's email (optional
          if session cookie is used)
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 12345abcdef
      responses:
        "200":
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: Email verified successfully.
        "400":
          description: Bad request - Missing or invalid session or token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: Invalid or missing session or token
        "401":
          description: Unauthorized - Session is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: Session expired or invalid
        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 422
                message: "Validation error: malformed token"
      security:
      - cookieAuth: []
      x-swagger-router-controller: Auth
  /auth/check-session:
    get:
      tags:
      - Auth
      summary: Check the validity of the current session
      description: Verifies if the user's session is valid and retrieves basic session
        information using session cookies.
      operationId: checkSession
      responses:
        "200":
          description: Session is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionStatusResponse'
              example:
                isValid: true
                userId: user_123
                expiresAt: 2024-12-02T15:00:00Z
        "401":
          description: Unauthorized - Session is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: Session expired or invalid
      security:
      - cookieAuth: []
      x-swagger-router-controller: Auth
  /auth/logout:
    delete:
      tags:
      - Auth
      summary: Log out the user
      description: Ends the user's session and invalidates the session token.
      operationId: logoutUser
      responses:
        "200":
          description: Successful logout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: Logout successful
        "401":
          description: Unauthorized - Invalid or missing session token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: Session token is invalid or expired
      security:
      - cookieAuth: []
      x-swagger-router-controller: Auth
  /account/change-password:
    post:
      tags:
      - Account
      summary: Change account password
      description: "Allows the user to change their account password. Admins can change\
        \ the password for another user by providing `user_id`, in which case the\
        \ `oldPassword` field is not required."
      operationId: changePassword
      parameters:
      - name: user_id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "The ID of the user whose password is being changed (admin\
            \ only). If not provided, the password for the currently authenticated\
            \ user will be changed."
          example: user_123
      requestBody:
        description: Old and new passwords
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
        required: true
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: Password changed successfully.
        "400":
          description: Bad request - Password requirements not met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: New password must be at least 8 characters long
        "401":
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: User not authenticated
        "403":
          description: Forbidden - Admin privileges required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 403
                message: Admin privileges required to change another user's password
      security:
      - cookieAuth: []
      x-swagger-router-controller: Account
  /account/update:
    put:
      tags:
      - Account
      summary: Update account details
      description: "Allows the user to update their account information, such as username\
        \ or email. Admins can update another user's account by providing a `user_id`."
      operationId: updateAccountDetails
      parameters:
      - name: user_id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "The ID of the user whose account is being updated (admin only).\
            \ If not provided, the authenticated user's account will be updated."
          example: user_123
      requestBody:
        description: New account details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountRequest'
        required: true
      responses:
        "200":
          description: Account updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: Account updated successfully.
        "400":
          description: Bad request - Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: Invalid email format
        "401":
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: User not authenticated
        "403":
          description: Forbidden - Admin privileges required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 403
                message: Admin privileges required to update another user's account
      security:
      - cookieAuth: []
      x-swagger-router-controller: Account
  /account/details:
    get:
      tags:
      - Account
      summary: Get account details
      description: "Retrieves account details. If an admin provides a `user_id`, the\
        \ details for that specific user will be fetched. Regular users can only fetch\
        \ their own account details."
      operationId: getAccountDetails
      parameters:
      - name: user_id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "The ID of the user whose details are being fetched (admin\
            \ only). If not provided, the currently authenticated user's details will\
            \ be fetched."
          example: user_123
      responses:
        "200":
          description: Account details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDetailsResponse'
              example:
                userId: user_123
                username: example_user
                email: user@example.com
                createdAt: 2024-12-02T12:00:00Z
        "401":
          description: Unauthorized - User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: User not authenticated
        "403":
          description: Forbidden - Admin privileges required for this action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 403
                message: Admin privileges required to access other users' details
      security:
      - cookieAuth: []
      x-swagger-router-controller: Account
  /account/delete:
    delete:
      tags:
      - Account
      summary: Delete account
      description: Deletes the authenticated user's account permanently. Admins can
        delete other users' accounts by specifying a `user_id`.
      operationId: deleteAccount
      parameters:
      - name: user_id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "The ID of the user whose account is being deleted (admin only).\
            \ If not provided, the authenticated user's account will be deleted."
          example: user_123
      responses:
        "200":
          description: Account deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: Account deleted successfully.
        "401":
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: User not authenticated
        "403":
          description: Forbidden - Admin privileges required for this action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 403
                message: Admin privileges required to delete another user's account
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: Account not found
      security:
      - cookieAuth: []
      x-swagger-router-controller: Account
  /quiz/create:
    post:
      tags:
      - Quiz
      summary: Create a new quiz (admin only)
      description: |
        Allows a user to create a new quiz with multiple-choice questions (MCQs). Each question must include:
        - `question`: The question text.
        - `options`: Array of answer choices (index 0 = A, index 1 = B, and so on).
        - `answer`: Index of the correct option.

        **Note**: The options array must contain at least four options (A-D), but additional options are allowed for flexibility.
      operationId: createQuiz
      requestBody:
        description: Quiz details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewQuiz'
        required: true
      responses:
        "201":
          description: Quiz created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
        "400":
          description: Invalid quiz data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: "Invalid quiz data: Missing title or questions."
        "401":
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: User not authenticated.
      security:
      - cookieAuth: []
      x-swagger-router-controller: Quiz
  /quiz/attempt/{quiz_id}:
    post:
      tags:
      - Quiz
      summary: Attempt a quiz
      description: Submit answers for a specific quiz.
      operationId: attemptQuiz
      parameters:
      - name: quiz_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          description: The ID of the quiz being attempted.
      requestBody:
        description: User's answers for the quiz
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/attempt_quiz_id_body'
        required: true
      responses:
        "200":
          description: Quiz attempt submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: Invalid attempt data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: Invalid answers array.
        "401":
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: User not authenticated.
      security:
      - cookieAuth: []
      x-swagger-router-controller: Quiz
  /quiz/edit/{quiz_id}:
    put:
      tags:
      - Quiz
      summary: Edit a quiz (admin only)
      description: |
        Allows an admin to modify quiz details, such as its title, tags, and questions.
        Validation ensures:
        - The updated quiz must have a `title` and a valid array of `questions`.
        - Each question must include:
          - `question`: The question text.
          - `options`: An array of answer choices (index 0 = A, index 1 = B, etc.).
          - `answer`: The correct option's index in the `options` array.

        **Note**: The updated options array must contain at least four options (A-D), but additional options are allowed for flexibility.
      operationId: editQuiz
      parameters:
      - name: quiz_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          description: The ID of the quiz to be edited.
      requestBody:
        description: Updated quiz details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewQuiz'
        required: true
      responses:
        "200":
          description: Quiz updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
              example:
                id: 101
                title: Updated General Knowledge Quiz
                tags:
                - general-knowledge
                - updated-trivia
                questions:
                - question: What is the capital of France?
                  options:
                  - Paris
                  - London
                  - Berlin
                  - Madrid
                  answer: 0
        "400":
          description: Invalid quiz data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: "Invalid quiz data: missing title or questions."
        "401":
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: User not authenticated.
        "403":
          description: Forbidden - User does not have permission to edit this quiz
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 403
                message: You do not have permission to edit this quiz.
        "404":
          description: Quiz not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: Quiz not found.
      security:
      - cookieAuth: []
      x-swagger-router-controller: Quiz
  /quiz/all:
    get:
      tags:
      - Quiz
      summary: Get all quizzes
      description: Retrieve a list of all public quizzes.
      operationId: getAllQuizzes
      responses:
        "200":
          description: List of all quizzes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quiz'
                x-content-type: application/json
        "401":
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: User not authenticated.
      security:
      - cookieAuth: []
      x-swagger-router-controller: Quiz
  /quiz/{quiz_id}:
    get:
      tags:
      - Quiz
      summary: Get quiz by ID
      description: Retrieve the details of a specific quiz by its ID.
      operationId: getQuizById
      parameters:
      - name: quiz_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          description: The ID of the quiz to retrieve.
      responses:
        "200":
          description: Quiz retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
        "401":
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: User not authenticated.
        "404":
          description: Quiz not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: Quiz not found.
      security:
      - cookieAuth: []
      x-swagger-router-controller: Quiz
  /quiz/results/{quiz_id}:
    get:
      tags:
      - Quiz
      summary: Get quiz results
      description: |
        Retrieve the results of a specific quiz. This includes the user's score, total questions, and a breakdown of correct and incorrect answers.

        **Behavior**:
        - Users can fetch their own results for a completed quiz.
        - Admins can fetch results for any user.
        - The route checks for quiz existence and whether the requesting user has the necessary permissions.
      operationId: getQuizResults
      parameters:
      - name: quiz_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          description: The ID of the quiz for which results are being retrieved.
          example: 101
      responses:
        "200":
          description: Quiz results retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "401":
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: User not authenticated.
        "403":
          description: Forbidden - User does not have permission to view results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 403
                message: You do not have permission to view these results.
        "404":
          description: Quiz not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: Quiz not found.
      security:
      - cookieAuth: []
      x-swagger-router-controller: Quiz
  /quiz/{quiz_id}/leaderboard:
    get:
      tags:
      - Quiz
      summary: Get quiz leaderboard
      description: |
        Retrieve the leaderboard for a specific quiz, showing the top scorers and their scores. The leaderboard is sorted by score in descending order.

        **Behavior**:
        - The `quiz_id` identifies the quiz for which the leaderboard is requested.
        - Pagination may be included to limit the number of entries returned per request.
      operationId: getQuizLeaderboard
      parameters:
      - name: quiz_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          description: The ID of the quiz for which the leaderboard is being retrieved.
          example: 101
      - name: page
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          description: Page number for paginated results (default is 1).
          example: 1
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          description: Number of results per page (default is 10).
          example: 10
      responses:
        "200":
          description: Quiz leaderboard retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardResponse'
        "401":
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: User not authenticated.
        "403":
          description: Forbidden - User does not have permission to view the leaderboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 403
                message: You do not have permission to view this leaderboard.
        "404":
          description: Quiz not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: Quiz not found.
      security:
      - cookieAuth: []
      x-swagger-router-controller: Quiz
  /quiz/profile:
    get:
      tags:
      - Quiz
      summary: Get completed quizzes
      description: |
        Retrieve the completed quizzes for the authenticated user or a specific user (for admins).

        **Behavior**:
        - If no `user_id` is provided, the route retrieves the completed quizzes of the authenticated user.
        - If `user_id` is provided, only admins can retrieve the completed quizzes for the specified user.
        - Results include:
          - Quiz ID
          - Quiz title
          - Score achieved
          - Total questions

        **Pagination**:
        - The `page` and `limit` query parameters allow for paginated results.
      operationId: getCompletedQuizzes
      parameters:
      - name: user_id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: The ID of the user whose completed quizzes are being retrieved
            (admin only).
          example: user_123
      - name: page
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          description: Page number for paginated results (default is 1).
          example: 1
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          description: Number of results per page (default is 10).
          example: 10
      responses:
        "200":
          description: Completed quizzes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletedQuizzesResponse'
        "401":
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: User not authenticated.
        "403":
          description: Forbidden - User does not have permission to view this profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 403
                message: You do not have permission to view this user's completed
                  quizzes.
      security:
      - cookieAuth: []
      x-swagger-router-controller: Quiz
  /quiz/search:
    get:
      tags:
      - Quiz
      summary: Search quizzes
      description: |
        Allows users to search for quizzes based on title, tags, or other criteria. Supports pagination.
      operationId: searchQuizzes
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: Search term to filter quizzes by title or description.
          example: general knowledge
      - name: page
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          description: Page number for paginated results (default is 1).
          example: 1
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          description: Number of results per page (default is 10).
          example: 10
      responses:
        "200":
          description: Quizzes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizSearchResponse'
        "400":
          description: Bad request - Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: Invalid query parameters.
        "401":
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: User not authenticated.
      security:
      - cookieAuth: []
      x-swagger-router-controller: Quiz
  /quiz/delete/{quiz_id}:
    delete:
      tags:
      - Quiz
      summary: Delete a quiz (admin only)
      description: Allows an admin to delete a quiz.
      operationId: deleteQuiz
      parameters:
      - name: quiz_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          description: The ID of the quiz to be deleted.
          example: 101
      responses:
        "200":
          description: Quiz deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        "401":
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: User not authenticated.
        "403":
          description: Forbidden - User does not have permission to delete this quiz
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 403
                message: You do not have permission to delete this quiz.
        "404":
          description: Quiz not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: Quiz not found.
      security:
      - cookieAuth: []
      x-swagger-router-controller: Quiz
components:
  schemas:
    LoginRequest:
      required:
      - identifier
      - password
      type: object
      properties:
        identifier:
          type: string
          example: john@example.com
        password:
          type: string
          example: AVeryStrongPassword
      xml:
        name: LoginRequest
    SessionResponse:
      type: object
      properties:
        sessionId:
          type: string
          example: 1234567890abcdef
        userId:
          type: string
          example: user_123
        expiresAt:
          type: string
          format: date-time
          example: 2024-12-02T12:00:00Z
      example:
        sessionId: 1234567890abcdef
        userId: user_123
        expiresAt: 2024-12-02T12:00:00Z
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          example: Error message
    RegisterRequest:
      required:
      - confirmPassword
      - email
      - password
      - username
      type: object
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        username:
          type: string
          example: new_user
        password:
          type: string
          format: password
          example: P@ssw0rd123
        confirmPassword:
          type: string
          format: password
          example: P@ssw0rd123
    UserResponse:
      type: object
      properties:
        id:
          type: string
          example: user_123
        username:
          type: string
          example: new_user
        email:
          type: string
          example: user@example.com
        createdAt:
          type: string
          format: date-time
          example: 2024-12-02T12:00:00Z
      example:
        createdAt: 2024-12-02T12:00:00Z
        id: user_123
        email: user@example.com
        username: new_user
    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: Logout successful
      example:
        message: Logout successful
    ForgetPasswordRequest:
      required:
      - email
      type: object
      properties:
        email:
          type: string
          description: The email address of the user
          format: email
          example: user@example.com
    SessionStatusResponse:
      type: object
      properties:
        isValid:
          type: boolean
          description: Indicates whether the session is still valid
          example: true
        userId:
          type: string
          description: ID of the authenticated user
          example: user_123
        expiresAt:
          type: string
          description: Expiration date and time of the session
          format: date-time
          example: 2024-12-02T15:00:00Z
      example:
        isValid: true
        userId: user_123
        expiresAt: 2024-12-02T15:00:00Z
    AccountDetailsResponse:
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier for the user
          example: user_123
        username:
          type: string
          description: The username of the user
          example: example_user
        email:
          type: string
          description: The email address of the user
          example: user@example.com
        createdAt:
          type: string
          description: The account creation date
          format: date-time
          example: 2024-12-02T12:00:00Z
      example:
        createdAt: 2024-12-02T12:00:00Z
        userId: user_123
        email: user@example.com
        username: example_user
    UpdateAccountRequest:
      type: object
      properties:
        username:
          type: string
          description: New username for the account
          example: new_user
        email:
          type: string
          description: New email address for the account
          format: email
          example: new_user@example.com
        otherField:
          type: string
          description: Any additional account-specific fields
          example: some_value
    ChangePasswordRequest:
      required:
      - confirmPassword
      - newPassword
      - oldPassword
      type: object
      properties:
        oldPassword:
          type: string
          description: The current password
          format: password
          example: oldP@ssw0rd123
        newPassword:
          type: string
          description: The new password
          format: password
          example: newP@ssw0rd456
        confirmPassword:
          type: string
          description: Confirmation of the new password
          format: password
          example: newP@ssw0rd456
    Quiz:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the quiz
          example: 101
        title:
          type: string
          description: Title of the quiz
          example: General Knowledge Quiz
        questions:
          type: array
          description: List of MCQ questions in the quiz
          items:
            $ref: '#/components/schemas/Question'
        tags:
          type: array
          description: Tags categorizing the quiz
          example:
          - general-knowledge
          - trivia
          - education
          items:
            type: string
      example:
        questions:
        - question: What is the capital of France?
          answer: 0
          options:
          - Paris
          - London
          - Berlin
          - Madrid
        - question: What is the capital of France?
          answer: 0
          options:
          - Paris
          - London
          - Berlin
          - Madrid
        id: 101
        title: General Knowledge Quiz
        tags:
        - general-knowledge
        - trivia
        - education
    Question:
      type: object
      properties:
        question:
          type: string
          description: The text of the MCQ
          example: What is the capital of France?
        options:
          type: array
          description: "Multiple-choice options for the question. \nThe array maps\
            \ index values to choices as follows:\n- Index 0 = A\n- Index 1 = B\n\
            - Index 2 = C\n- Index 3 = D\n- Additional indices are allowed for flexibility\
            \ but typically not used.\n"
          example:
          - Paris
          - London
          - Berlin
          - Madrid
          items:
            type: string
        answer:
          type: integer
          description: "The correct answer's index (e.g., 0 for 'A', 1 for 'B', etc.)"
          example: 0
      example:
        question: What is the capital of France?
        answer: 0
        options:
        - Paris
        - London
        - Berlin
        - Madrid
    NewQuiz:
      required:
      - questions
      - title
      type: object
      properties:
        title:
          type: string
          description: Title of the quiz
          example: General Knowledge Quiz
        tags:
          type: array
          description: Tags categorizing the quiz
          example:
          - general-knowledge
          - trivia
          items:
            type: string
        questions:
          type: array
          description: List of MCQ questions in the quiz
          items:
            $ref: '#/components/schemas/Question'
    LeaderboardResponse:
      type: object
      properties:
        quiz_id:
          type: integer
          description: The ID of the quiz.
          example: 101
        leaderboard:
          type: array
          description: List of top scorers.
          items:
            $ref: '#/components/schemas/LeaderboardEntry'
      example:
        quiz_id: 101
        leaderboard:
        - score: 95
          username: quiz_master123
        - score: 95
          username: quiz_master123
    LeaderboardEntry:
      type: object
      properties:
        username:
          type: string
          description: The name of the user on the leaderboard.
          example: quiz_master123
        score:
          type: integer
          description: The score achieved by the user.
          example: 95
      example:
        score: 95
        username: quiz_master123
    CompletedQuizzesResponse:
      type: object
      properties:
        user_id:
          type: string
          description: Unique identifier of the user whose completed quizzes are being
            retrieved.
          example: user_123
        completed_quizzes:
          type: array
          description: List of completed quizzes with scores.
          items:
            $ref: '#/components/schemas/AttemptedQuiz'
      example:
        completed_quizzes:
        - score: 8
          quiz_id: 101
          total_questions: 10
          title: General Knowledge Quiz
        - score: 8
          quiz_id: 101
          total_questions: 10
          title: General Knowledge Quiz
        user_id: user_123
    AttemptedQuiz:
      type: object
      properties:
        quiz_id:
          type: integer
          description: The ID of the quiz.
          example: 101
        title:
          type: string
          description: The title of the quiz.
          example: General Knowledge Quiz
        score:
          type: integer
          description: The score achieved by the user.
          example: 8
        total_questions:
          type: integer
          description: Total number of questions in the quiz.
          example: 10
      example:
        score: 8
        quiz_id: 101
        total_questions: 10
        title: General Knowledge Quiz
    QuizSearchResponse:
      type: object
      properties:
        total_results:
          type: integer
          description: Total number of quizzes matching the search criteria.
          example: 25
        quizzes:
          type: array
          description: List of quizzes matching the search criteria.
          items:
            $ref: '#/components/schemas/QuizSummary'
      example:
        quizzes:
        - quiz_id: 101
          popularity: 150
          created_at: 2024-12-01T12:00:00Z
          title: General Knowledge Quiz
          tags:
          - general-knowledge
          - trivia
        - quiz_id: 101
          popularity: 150
          created_at: 2024-12-01T12:00:00Z
          title: General Knowledge Quiz
          tags:
          - general-knowledge
          - trivia
        total_results: 25
    QuizSummary:
      type: object
      properties:
        quiz_id:
          type: integer
          description: The unique ID of the quiz.
          example: 101
        title:
          type: string
          description: Title of the quiz.
          example: General Knowledge Quiz
        tags:
          type: array
          description: Tags associated with the quiz.
          example:
          - general-knowledge
          - trivia
          items:
            type: string
        created_at:
          type: string
          description: Timestamp when the quiz was created.
          format: date-time
          example: 2024-12-01T12:00:00Z
        popularity:
          type: integer
          description: Number of times the quiz has been attempted.
          example: 150
      example:
        quiz_id: 101
        popularity: 150
        created_at: 2024-12-01T12:00:00Z
        title: General Knowledge Quiz
        tags:
        - general-knowledge
        - trivia
    attempt_quiz_id_body:
      type: object
      properties:
        answers:
          type: array
          description: Array of answers where each index corresponds to a question.
          items:
            type: integer
            example: 1
      example:
        answers:
        - 0
        - 2
        - 1
        - 3
    inline_response_200:
      type: object
      properties:
        score:
          type: integer
          description: User's score for the quiz.
          example: 8
        totalQuestions:
          type: integer
          description: Total number of questions in the quiz.
          example: 10
      example:
        score: 8
        totalQuestions: 10
    inline_response_200_1:
      type: object
      properties:
        quiz_id:
          type: integer
          description: The ID of the quiz.
          example: 101
        score:
          type: integer
          description: The user's score for the quiz.
          example: 8
        total_questions:
          type: integer
          description: The total number of questions in the quiz.
          example: 10
        correct_answers:
          type: array
          description: Indices of correctly answered questions.
          example:
          - 0
          - 1
          - 3
          - 5
          items:
            type: integer
        incorrect_answers:
          type: array
          description: Indices of incorrectly answered questions.
          example:
          - 2
          - 4
          - 6
          - 7
          items:
            type: integer
      example:
        score: 8
        quiz_id: 101
        total_questions: 10
        incorrect_answers:
        - 2
        - 4
        - 6
        - 7
        correct_answers:
        - 0
        - 1
        - 3
        - 5
    inline_response_200_2:
      type: object
      properties:
        message:
          type: string
          example: Quiz deleted successfully.
      example:
        message: Quiz deleted successfully.
  securitySchemes:
    cookieAuth:
      type: apiKey
      description: Session cookie used to authenticate requests
      name: SESSIONID
      in: cookie